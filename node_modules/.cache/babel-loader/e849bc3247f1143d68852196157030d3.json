{"ast":null,"code":"const indexBy = require(\"lodash.indexby\");\n\nconst collectify = require(\"./util/collectify\");\n\nconst _require = require(\"./util/string\"),\n      jsify = _require.jsify,\n      downcaseFirst = _require.downcaseFirst;\n\nfunction base(resp) {\n  var data = resp.resultSets[0];\n  var headers = data.headers.map(jsify);\n  return collectify(headers, data.rowSet);\n}\n\nfunction general(resp) {\n  return resp.resultSets.reduce(function (ret, set) {\n    var name = downcaseFirst(set.name);\n    ret[name] = collectify(set.headers.map(jsify), set.rowSet);\n    return ret;\n  }, {});\n} // todo make this work identical to update-players.js\n\n\nfunction players(resp) {\n  return base(resp).map(function (player) {\n    var names = player.displayLastCommaFirst.split(\", \").reverse();\n    return {\n      firstName: names[0].trim(),\n      lastName: (names[1] ? names[1] : \"\").trim(),\n      playerId: player.personId,\n      teamId: player.teamId\n    };\n  });\n}\n\nfunction lineups(resp) {\n  function makeLineup(lu) {\n    delete lu.groupSet;\n    lu.playerIds = lu.groupId.split(\" - \").map(Number);\n    return lu;\n  }\n\n  return general(resp).lineups.map(makeLineup);\n}\n\nfunction sportVu(resp) {\n  let temp = general(resp);\n\n  if (temp.length !== 1) {\n    throw new Error(\"Expected sportVu response to have a single result set\");\n  }\n\n  return indexBy(temp[0], \"playerId\");\n}\n\nmodule.exports = {\n  base,\n  general,\n  players,\n  lineups,\n  sportVu\n};","map":null,"metadata":{},"sourceType":"script"}